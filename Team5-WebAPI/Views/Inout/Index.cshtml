@model IEnumerable<Team5_WebAPI.Models.InOut_VO>

@{
    ViewBag.Title = "Index";
}
@{
    int number = ViewBag.Ints;
    int sumtotal = 0;
    int sumtotalout = 0;
    int number2 = ViewBag.Intt;

    string labels = ViewBag.Labels;

    string label1 = ViewBag.Label1;
    string data1 = ViewBag.data;

    string labels2 = ViewBag.Labels1;
    string label2 = ViewBag.Label2;
    string data2 = ViewBag.data2;

}
<div class="callout callout-info">
    <h4>입고 확인</h4>

    <p>
        거래처에서 매입, 창고에 입고되는 흐름을 월별 단위를 확인하여 자재의 흐름을 확인할 수 있습니다.
    </p>
</div>

<div class="row">
    <div class="col-xs-12">
        <div class="box box-default">
            <div class="box-body">

                <div class="col-md-6">

                    <!-- /.box-header -->
                    <div class="box-body">
                        <table id="example1" class="table table-bordered table-striped">
                            <tbody>
                                <tr>
                                    <th style="width: 10px"></th>
                                    <th>현재 현황</th>
                                    <th>입고 날짜</th>
                                    <th>입고 수량</th>
                                </tr>

                                @foreach (var InItem in Model.Where(x => x.InOut_Gubun == "입고"))
                                {

                                    <tr>
                                        <td>@number</td>
                                        <td>@InItem.InOut_Date 월 현황</td>
                                        <td>@InItem.InOut_Gubun</td>
                                        <td><span class="badge bg-aqua">@InItem.Total</span></td>
                                    </tr>
                                    sumtotal += InItem.Total;
                                    number++;
                                }
                            </tbody>
                        </table>

                        <!-- /.box-body -->

                    </div>
                </div>

                <div class="col-md-6">

                    <div class="box-body">
                        <div class="chart">
                            <canvas id="barChart1" style="height:350px"></canvas>
                        </div>
                    </div>
                    <!-- /.box-body -->
                </div>
                <!-- /.box-body -->

                <div class="col-lg-6 col-xs-6">
                    <!-- small box -->
                    <div class="small-box bg-aqua">
                        <div class="inner">
                            <h3>총 @sumtotal 개</h3>

                            <p>이번해 입고된 수량</p>
                        </div>
                        <div class="icon">
                            <i class="ion ion-bag"></i>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="callout callout-danger">
    <h4>출고 확인</h4>

    <p>
        제품이 생산되는 과정에서 제품을 생산할수 있도록 생산현장으로 이동(출고)한 흐름을 확인할수 있습니다.
    </p>
</div>
<div class="row">
    <div class="col-xs-12">
        <div class="box box-default">
            <div class="box-body">
                <div class="box-header  ">


                </div>
                <div class="col-md-6">

                    <!-- /.box-header -->
                    <div class="box-body">
                        <table id="example2" class="table table-bordered table-striped">
                            <tbody>
                                <tr>
                                    <th style="width: 10px"></th>
                                    <th>현재 현황</th>
                                    <th>입고 날짜</th>
                                    <th>입고 수량</th>
                                </tr>


                                @foreach (var InItem in Model.Where(x => x.InOut_Gubun == "출고"))
                                {

                                    <tr>
                                        <td>@number2</td>
                                        <td>@InItem.InOut_Date 월 현황</td>
                                        <td>@InItem.InOut_Gubun</td>
                                        <td><span class="badge bg-red">@InItem.Total</span></td>
                                    </tr>
                                    sumtotalout += InItem.Total;
                                    number2++;
                                }
                            </tbody>
                        </table>

                    </div>
                </div>



                <div class="col-md-6">

                    <div class="box-body">
                        <div class="chart">
                            <canvas id="barChart2" style="height:350px"></canvas>
                        </div>
                    </div>
                    <!-- /.box-body -->
                </div>

                <div class="col-lg-6 col-xs-6">
                    <!-- small box -->
                    <div class="small-box bg-red">
                        <div class="inner">
                            <h3>총 @sumtotalout 개</h3>

                            <p>이번해 출고된 수량</p>
                        </div>
                        <div class="icon">
                            <i class="ion ion-bag"></i>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script>
        $(document).ready(function () {



            //-------------
            //- BAR CHART -
            //-------------
            var barChartCanvas = $('#barChart1').get(0).getContext('2d')
            var barChart = new Chart(barChartCanvas)

            var temp = "@labels";
            var arrTemp = temp.split(',');

            var barChartData = {
                labels: arrTemp,
                datasets: [
                    {
                        label: '@label1',
                        fillColor: 'rgba(0, 126, 252)',
                        strokeColor: 'rgba(0, 192, 239)',
                        pointColor: 'rgba(210, 214, 222, 1)',
                        pointStrokeColor: '#00c0ef',
                        pointHighlightFill: '#fff',
                        pointHighlightStroke: 'rgba(220,220,220,1)',
                        data: @data1
                    }

                ]
            }


            //barChartData.datasets[1].fillColor = '#00a62a'
            //barChartData.datasets[1].strokeColor = '#00a61a'
            //barChartData.datasets[1].pointColor = '#00a63a'
            var barChartOptions = {
                //Boolean - Whether the scale should start at zero, or an order of magnitude down from the lowest value
                scaleBeginAtZero: true,
                //Boolean - Whether grid lines are shown across the chart
                scaleShowGridLines: true,
                //String - Colour of the grid lines
                scaleGridLineColor: 'rgba(0,0,0,.05)',
                //Number - Width of the grid lines
                scaleGridLineWidth: 1,
                //Boolean - Whether to show horizontal lines (except X axis)
                scaleShowHorizontalLines: true,
                //Boolean - Whether to show vertical lines (except Y axis)
                scaleShowVerticalLines: true,
                //Boolean - If there is a stroke on each bar
                barShowStroke: true,
                //Number - Pixel width of the bar stroke
                barStrokeWidth: 2,
                //Number - Spacing between each of the X value sets
                barValueSpacing: 5,
                //Number - Spacing between data sets within X values
                barDatasetSpacing: 1,
                //String - A legend template
                legendTemplate: '<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<datasets.length; i++){%><li><span style="background-color:<%=datasets[i].fillColor%>"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>',
                //Boolean - whether to make the chart responsive
                responsive: true,
                maintainAspectRatio: true
            }

            barChartOptions.datasetFill = false
            barChart.Bar(barChartData, barChartOptions)



               //-------------
            //- BAR CHART -
            //-------------
            var barChartCanvas = $('#barChart2').get(0).getContext('2d')
            var barChart = new Chart(barChartCanvas)

            var temp = "@labels2";
            var arrTemp = temp.split(',');

            var barChartData = {
                labels: arrTemp,
                datasets: [
                    {
                        label: '@label2',
                        fillColor: 'rgba(255, 0, 0)',
                        strokeColor: 'rgba(247, 89, 89)',
                        pointColor: 'rgba(210, 214, 222, 1)',
                        pointStrokeColor: '#00c0ef',
                        pointHighlightFill: '#fff',
                        pointHighlightStroke: 'rgba(220,220,220,1)',
                        data: @data2
                    }

                ]
            }


            //barChartData.datasets[1].fillColor = '#00a62a'
            //barChartData.datasets[1].strokeColor = '#00a61a'
            //barChartData.datasets[1].pointColor = '#00a63a'
            var barChartOptions = {
                //Boolean - Whether the scale should start at zero, or an order of magnitude down from the lowest value
                scaleBeginAtZero: true,
                //Boolean - Whether grid lines are shown across the chart
                scaleShowGridLines: true,
                //String - Colour of the grid lines
                scaleGridLineColor: 'rgba(0,0,0,.05)',
                //Number - Width of the grid lines
                scaleGridLineWidth: 1,
                //Boolean - Whether to show horizontal lines (except X axis)
                scaleShowHorizontalLines: true,
                //Boolean - Whether to show vertical lines (except Y axis)
                scaleShowVerticalLines: true,
                //Boolean - If there is a stroke on each bar
                barShowStroke: true,
                //Number - Pixel width of the bar stroke
                barStrokeWidth: 2,
                //Number - Spacing between each of the X value sets
                barValueSpacing: 5,
                //Number - Spacing between data sets within X values
                barDatasetSpacing: 1,
                //String - A legend template
                legendTemplate: '<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<datasets.length; i++){%><li><span style="background-color:<%=datasets[i].fillColor%>"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>',
                //Boolean - whether to make the chart responsive
                responsive: true,
                maintainAspectRatio: true
            }

                    barChartOptions.datasetFill = false
            barChart.Bar(barChartData, barChartOptions)

        })

    </script>
}